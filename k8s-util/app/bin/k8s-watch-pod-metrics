#!/usr/bin/env perl
use Mojo::Base -strict, -signatures, -async_await;
use YAML::XS;
use Mojo::UserAgent;
use Mojo::JSON qw(decode_json);
use Mojo::URL;
use Mojo::Util qw(dumper);
use Mojo::Log;
use Text::Table;
use Time::Piece;
use Term::ExtendedColor ':attributes';
use Number::Format;
$|++;

my $log = Mojo::Log->new->level( $ENV{MOJO_LOG_LEVEL} );
my $ua  = Mojo::UserAgent->new;
sub bu { return bold( underline(shift) ); }
my @data_columns = (
    bu("NAME"),       bu("PHASE"),
    bu("START-TIME"), bu("NODE"),
    bu("IP"),         bold( fg( "grey23", "|" ) ),
    bu("NAME"),       bu("READY"),
    bu("RESTARTS"),   bu("STATE"),
    bu("CPU-REQ"),    bu("CPU-LIMIT"),
    bu("CPU-USAGE"),  bu("CPU%"),
    bu("MEM-REQ"),    bu("MEM-LIMIT"),
    bu("MEM-USAGE"),  bu("MEM%")
);
my $number_format = Number::Format->new(
    KIBI_SUFFIX => 'Ki',
    MEBI_SUFFIX => 'Mi',
    GIBI_SUFFIX => 'Gi',
);

###############################################################################
###############################################################################
###############################################################################
my $kubeconfig
    = YAML::XS::Load( Mojo::File->new( $ENV{KUBECONFIG} )->slurp );
my ( $k8s_current_namespace, $k8s_current_server, $k8s_current_user )
    = split '/', $kubeconfig->{"current-context"};
$log->debug("k8s_current_namespace: $k8s_current_namespace");
$log->debug("k8s_current_server: $k8s_current_server");
$log->debug("k8s_current_user: $k8s_current_user");

my $k8s_current_api_server
    = ( grep { $_->{name} eq $k8s_current_server }
        @{ $kubeconfig->{clusters} } )[0]->{cluster}{server};
$log->debug("k8s_current_api_server: $k8s_current_api_server");

my $k8s_current_user_api_token
    = ( grep { $_->{name} eq "$k8s_current_user/$k8s_current_server" }
        @{ $kubeconfig->{users} } )[0]->{user}{token};
$log->debug("k8s_current_user_api_token: $k8s_current_user_api_token");

my $k8s_pods_api_url
    = Mojo::URL->new(
    "$k8s_current_api_server/api/v1/namespaces/$k8s_current_namespace/pods");
$log->debug( "k8s_pods_api_url: " . $k8s_pods_api_url->to_string );

my $k8s_metrics_pods_api_url
    = Mojo::URL->new(
    "$k8s_current_api_server/apis/metrics.k8s.io/v1beta1/namespaces/$k8s_current_namespace/pods"
    );
$log->debug(
    "k8s_metrics_pods_api_url: " . $k8s_metrics_pods_api_url->to_string );

my $k8s_api_server_request_headers
    = Mojo::Headers->new->authorization("Bearer $k8s_current_user_api_token")
    ->accept("application/json");
$log->debug( "k8s_api_server_request_headers, $_: "
        . $k8s_api_server_request_headers->to_hash->{$_} )
    for keys %{ $k8s_api_server_request_headers->to_hash };

###############################################################################
###############################################################################
###############################################################################

# Search kubapi non-blocking for multiple terms concurrently
my ( $pods_info_ref, $pods_metrics_ref );
async sub get_pods_details_p ($ua) {
    my @results = await Mojo::Promise->all(
        $ua->get_p(
            $k8s_pods_api_url => $k8s_api_server_request_headers->to_hash
        ),
        $ua->get_p(
            $k8s_metrics_pods_api_url =>
                $k8s_api_server_request_headers->to_hash
        ),
    );
    $pods_info_ref    = $results[0]->[0]->result->json;
    $pods_metrics_ref = $results[1]->[0]->result->json;

    return;
}

###############################################################################
###############################################################################
###############################################################################

sub load_text_table {
    get_pods_details_p($ua)->wait;

    my $tb = Text::Table->new(@data_columns);

    for my $pod_info_ref ( @{ $pods_info_ref->{items} } ) {
        my @tb_pod_row = (
            $pod_info_ref->{metadata}{name},
            phase_text( $pod_info_ref->{status}{phase} ),
            utc_to_local( $pod_info_ref->{status}{startTime} ),
            $pod_info_ref->{spec}{nodeName},
            $pod_info_ref->{status}{podIP},
        );
        my @empty_tb_pod_row = map {""} ( 1 .. scalar @tb_pod_row );
        my $tb_pod_row_added_already;

        my $pod_metrics_ref = (
            grep {
                $_->{metadata}{namespace} eq
                    $pod_info_ref->{metadata}{namespace}
                    and $_->{metadata}{name} eq $pod_info_ref->{metadata}{name}
            } @{ $pods_metrics_ref->{items} }
        )[0];

        for my $container_ref ( @{ $pod_info_ref->{spec}{containers} } ) {
            my $container_status_ref
                = ( grep { $_->{name} eq $container_ref->{name} }
                    @{ $pod_info_ref->{status}{containerStatuses} } )[0];
            my $container_metrics_ref
                = ( grep { $_->{name} eq $container_ref->{name} }
                    @{ $pod_metrics_ref->{containers} } )[0];

            my $container_state
                = ( keys %{ $container_status_ref->{state} } )[0];
            my $container_state_reason
                = $container_status_ref->{state}{$container_state}{reason};

            my $container_resource_memory_usage_bytes
                = $number_format->unformat_number(
                $container_metrics_ref->{usage}{memory} )
                if $container_metrics_ref->{usage}{memory};

            my $container_resource_memory_usage_bytes_text = "";
            if ($container_resource_memory_usage_bytes) {
                $container_resource_memory_usage_bytes_text
                    = $number_format->format_bytes(
                    $container_resource_memory_usage_bytes,
                    mode      => "iec",
                    precision => 0,
                    );
            }

            my @tb_container_row = (
                bold( fg( "grey23", "|" ) ),
                $container_ref->{name},
                ready_text(
                    $container_status_ref->{ready},
                    $pod_info_ref->{status}{phase}
                ),
                restarts_text( $container_status_ref->{restartCount} ),
                state_text( $container_state, $container_state_reason ),
                $container_ref->{resources}{requests}{cpu},
                $container_ref->{resources}{limits}{cpu},
                $container_metrics_ref->{usage}{cpu},
                container_resource_cpu_usage_percentage_text(
                    $container_ref->{resources}{limits}{cpu},
                    $container_metrics_ref->{usage}{cpu}
                ),
                $container_ref->{resources}{requests}{memory},
                $container_ref->{resources}{limits}{memory},
                $container_resource_memory_usage_bytes_text,
                container_resource_memory_usage_percentage_text(
                    $container_ref->{resources}{limits}{memory},
                    $container_resource_memory_usage_bytes
                ),
            );

            $tb->load(
                [   (     $tb_pod_row_added_already
                        ? @empty_tb_pod_row
                        : @tb_pod_row
                    ),
                    @tb_container_row
                ]
            );
            $tb_pod_row_added_already = 1;
        }
    }

    return $tb;
}

sub utc_to_local ($utc_ts) {
    my $utc_tp   = Time::Piece->strptime( $utc_ts, '%Y-%m-%dT%H:%M:%SZ' );
    my $local_tp = localtime( $utc_tp->epoch );
    return $local_tp->strftime('%Y-%m-%d %I:%M:%S %p');
}

sub phase_text ($phase) {
    return "$phase"                        if $phase eq 'Succeeded';
    return fg( "lightskyblue3", "$phase" ) if $phase eq 'Pending';
    return "$phase"                        if $phase eq 'Running';
    return fg( "red2", "$phase" )          if $phase eq 'Failed';
    return fg( "darkorange3", "$phase" )   if $phase eq 'Unknown';
    return fg( "red2", "$phase" );
}

sub ready_text ( $ready, $phase ) {
    return "↻"                        if $ready;
    return "✔"                        if $phase eq 'Succeeded';
    return fg( "lightskyblue3", "-" ) if $phase eq 'Pending';
    return fg( "darkorange3", "•" )   if $phase eq 'Running';
    return fg( "red2", "X" )          if $phase eq 'Failed';
    return fg( "darkorange3", "☸️" )  if $phase eq 'Unknown';
    return fg( "red2", "⁉️" );
}

sub restarts_text ($restarts) {
    return fg( "darkorange3", "$restarts" ) if $restarts > 0;
    return $restarts;
}

sub state_text ( $state, $reason ) {
    return $state if not $reason;
    my %red_reason = ( 'OOMKilled' => 1, 'Error' => 1, );
    return sprintf "%s,%s", $state, fg( "red2", "$reason" )
        if exists $red_reason{$reason};
    my %orange_reason = ( 'CrashLoopBackOff' => 1, );
    return sprintf "%s,%s", $state, fg( "darkorange3", "$reason" )
        if exists $orange_reason{$reason};
    my %blue_reason = ( 'ContainerCreating' => 1, );
    return sprintf "%s,%s", $state, fg( "lightskyblue3", "$reason" )
        if exists $blue_reason{$reason};
    return sprintf "%s,%s", $state, $reason;
}

sub container_resource_cpu_usage_percentage_text ( $container_cpu_limit,
    $container_cpu_usage )
{
    return fg( "grey23", "-" )
        if not $container_cpu_limit
        or not $container_cpu_usage;

    my $container_resource_limit_cpu_cores
        = $container_cpu_limit =~ s/m$//
        ? $container_cpu_limit * .001
        : $container_cpu_limit;

    my $container_resource_cpu_usage_cores
        = $container_cpu_usage =~ s/m$//
        ? $container_cpu_usage * .001
        : $container_cpu_usage;

    my $container_resource_cpu_usage_percentage = int(
        (         $container_resource_cpu_usage_cores
                / $container_resource_limit_cpu_cores
        ) * 100
    );

    if ( $container_resource_cpu_usage_percentage >= 90 ) {
        $container_resource_cpu_usage_percentage = fg( "red2",
            ( sprintf '%s%s', $container_resource_cpu_usage_percentage, '%' ) );
    }
    elsif ( $container_resource_cpu_usage_percentage >= 70 ) {
        $container_resource_cpu_usage_percentage = fg( "darkorange3",
            ( sprintf '%s%s', $container_resource_cpu_usage_percentage, '%' ) );
    }
    else {
        $container_resource_cpu_usage_percentage = sprintf '%s%s',
            $container_resource_cpu_usage_percentage, '%';
    }

    return $container_resource_cpu_usage_percentage;
}

sub container_resource_memory_usage_percentage_text ( $container_memory_limit,
    $container_memory_usage_bytes )
{
    return fg( "grey23", "-" )
        if not $container_memory_limit
        or not $container_memory_usage_bytes;

    my $container_memory_limit_bytes
        = $number_format->unformat_number($container_memory_limit);

    my $container_resource_memory_usage_percentage
        = int(
        ( $container_memory_usage_bytes / $container_memory_limit_bytes )
        * 100 );

    if ( $container_resource_memory_usage_percentage >= 90 ) {
        $container_resource_memory_usage_percentage = fg(
            "red2",
            (   sprintf '%s%s',
                $container_resource_memory_usage_percentage, '%'
            )
        );
    }
    elsif ( $container_resource_memory_usage_percentage >= 70 ) {
        $container_resource_memory_usage_percentage = fg(
            "darkorange3",
            (   sprintf '%s%s',
                $container_resource_memory_usage_percentage, '%'
            )
        );
    }
    else {
        $container_resource_memory_usage_percentage = sprintf '%s%s',
            $container_resource_memory_usage_percentage, '%';
    }

    return $container_resource_memory_usage_percentage;
}

###############################################################################
###############################################################################
###############################################################################
binmode( STDOUT, "encoding(UTF-8)" );

# my $tb = load_text_table();
# printf "%s: %s        %s: %s        %s: %s\n\n", bold("NAMESPACE"),
#     $k8s_current_namespace, bold("USER"), $k8s_current_user, bold("API"),
#     $k8s_current_api_server;
# print $tb;

while (1) {
    my $tb = load_text_table();
    print "\033[2J";      #clear the screen
    print "\033[0;0H";    #jump to 0,0
    printf "%s: %s        %s: %s        %s: %s        %s: %s\n\n",
        bold("NAMESPACE"),
        $k8s_current_namespace, bold("USER"), $k8s_current_user, bold("API"),
        $k8s_current_api_server, bold("TZ"), ( $ENV{TZ} // "" );
    print $tb;
    sleep $ENV{WATCH_ITERATION};
}
